#!/bin/bash
#Wrote by Nicolas Le Guerroué
#####################################################################################
##
##    SETTINGS
##
#####################################################################################
#################################################
## Colors
#################################################
echo ">>>"`pwd`
default="\033[0m"
black="\033[30m"
red="\033[31m"
green="\033[32m"
orange="\033[33m"
blue="\033[34m"

#################################################
## Folders
#################################################

outputDir="Output" 						#Contains all file generated by compiling project
img_dir="Images" 						#Contains all images of project
utils_dir="Utils" 						#Contains Utils library
part_dir="Parts" 						#Contains content file
makeDir="Make"							#Contains make files
vscode_dir=".vscode"

#Generated files
renderReportFile=".render_report.txt"
renderReportLog=".render_report_log.txt"
bibliographyMerge="Bibliography.bib"
#################################################
## Files
#################################################

main_file="main.tex" 							#main file
standlone="standlone.tex"						#standlone file -> compiling without any other file
version="Versions.tex"

#################################################
## Function
#################################################

function createDirectory {
	directory="$1"
	if [ -z "$directory" ]; then
		echo -e "$red"
 		echo -e "Please, give a folder name in argument of createDirectory function !"
		echo -e "$default"
	else
		if [ ! -d "$directory" ];then
			mkdir $directory 
		fi
	fi
	
}
#End createDirectory

#set var wit default value if any value is passed
function loadValue {
	default_value="$1"
	load_value="$2"
	if [ -z "$load_value" ]; then
		echo "$default_value"
	else
		echo "$load_value"
	fi
	
}
#End createDirectory

#compile latex in pdf with error checking
function pdfLatex {
	pdflatex_common_args="--file-line-error --halt-on-error"  #--shell-escape used to minted env
	pdflatex ${pdflatex_common_args} --output-dir=$outputDir ../$main.tex >> $renderReportLog
	pdflatex_success=$?
	if [ ! $pdflatex_success -eq 0 ];then
		echo -e "${red}An error occurred during pdflatex compilation :\nExtract of the error log :"
		echo -e ""
		tail -n 15 $renderReportLog
		echo -e "$default"
		exit
	fi
	echo -e "$default"
	echo "End of compilation"
}
#End pdfLatex


#####################################################################################
##
##    Generate Snippets project
##
#####################################################################################
if [ "$1" == "--snippet" ];then

	python3 Utils-latex/tools/generateSnippets.py
	exit
fi

#####################################################################################
##
##    GENERATE LOG LIBRARIES
##
#####################################################################################
function makeChart {

	#$1 : Directory to count 
	#$2 : Output filename
	#$3 : Title x axis
	#$4 : Title y axis 
	#$5 : Title

	echo "" > data.txt
	echo "" > graph.gnuplot
	for item in "$1"/*
	do
		name=`echo $item | cut -d'/' -f2 | cut -d'.' -f1`
		echo $name `wc -l $item | cut -d' ' -f1` >> data.txt
	done

	echo "set terminal png" >> graph.gnuplot
	echo "set output '"$2"'" >> graph.gnuplot
	echo "set title '"$5"'" >> graph.gnuplot
	echo "set xlabel '"$3"'" >> graph.gnuplot
	echo "set ylabel '"$4"'" >> graph.gnuplot
	echo "set grid" >> graph.gnuplot
	echo "" >> graph.gnuplot
	echo "set style data histogram" >> graph.gnuplot
	echo "set style histogram cluster gap 1" >> graph.gnuplot
	echo "set style fill solid border -1" >> graph.gnuplot
	echo "" >> graph.gnuplot
	echo "set xtics rotate by 60 right  " >> graph.gnuplot
	echo "plot 'data.txt' using 2:xtic(1)" >> graph.gnuplot

	gnuplot graph.gnuplot

}

function makeRecursiveChart {

	#$1 : Directory to count 
	#$2 : Output filename
	#$3 : Title x axis
	#$4 : Title y axis 
	#$5 : Title

	echo "" > data.txt
	echo "" > graph.gnuplot

	for dir in $part_dir/*
	do
		for file in $dir/*
		do
	
		name=`echo $file | cut -d'/' -f3`
		echo $name `wc -l $file | cut -d' ' -f1` >> data.txt

		done
	done

	echo "set terminal png" >> graph.gnuplot
	echo "set output '"$2"'" >> graph.gnuplot
	echo "set title '"$5"'" >> graph.gnuplot
	echo "set xlabel '"$3"'" >> graph.gnuplot
	echo "set ylabel '"$4"'" >> graph.gnuplot
	echo "set grid" >> graph.gnuplot
	echo "" >> graph.gnuplot
	echo "set style data histogram" >> graph.gnuplot
	echo "set style histogram cluster gap 1" >> graph.gnuplot
	echo "set style fill solid border -1" >> graph.gnuplot
	echo "" >> graph.gnuplot
	echo "set xtics rotate by 60 right  " >> graph.gnuplot
	echo "plot 'data.txt' using 2:xtic(1)" >> graph.gnuplot

	gnuplot graph.gnuplot

}

begin=`date +"%s"`

#####################################################################################
##
##    INIT PROJECT with --init argument in command line
##
#####################################################################################
make_chart=1
############################# IF $1 = "--init" ######################################

if [ "$2" != "" ];then  #Force to compilee after first init

	cd $2 #Select new directory (after init)
	code .
fi


automatic=0

#####################################################################################
##
##    GENERATE LOG PART
##
#####################################################################################
if [ $make_chart != 0 ]
then
	echo -e "$green"
	echo -e ">>> generating graph..."
    makeChart "Utils" "Utils.png" "Bilbiothèque" "Nombre de lignes" "Nombre de ligne par bibliothèque"
	makeRecursiveChart "Parts" "Part.png" "Parties" "Nombre de lignes" "Nombre de ligne par fichier"
	echo -e ">>> generating graph : OK"

	rm graph.gnuplot
	rm data.txt
fi
############################# END IF ###############################################


############################# IF $1 = "--check" ######################################
if [ "$1" == "--version" ];then

	echo -e "Add update phrase..."
	echo -e "Listing of versions : $orange"
	cat $makeDir/$version
	echo -e "$default"
    echo -e "What's the date uf update (today) [mars 2021 for example] ?"
    read date

    if [ "$date" != "" ];then
		echo ""
	else
		$date="\today"
    fi

    echo -e "What's the content of update ?"
    read content

    if [ "$content" != "" ];then
		echo ""
	else
		$content="unknown"
    fi

	echo -e "" >> $makeDir/$version
	echo -e "" >> $makeDir/$version
	echo -n "\addUpdate{$date}{$content}" >> $makeDir/$version
fi

#####################################################################################
##
##    MAKE project
##
#####################################################################################

#################################################
## Checking dir
#################################################	
createDirectory $img_dir
createDirectory $utils_dir
createDirectory $part_dir
createDirectory $outputDir

main="main" #main file
parts_dir="Parts"

#################################################
## Compilation
#################################################	
count_step=1 			#Var count of step
count_sum_full=9				#Cout total_full
count_sum_light=7
echo -e ">>> Compilation of `pwd` folder..."
echo -e "$green"
echo -e "[Step $count_step / $count_sum_full] >>> Cleaning of $outputDir folder..."
echo -e "$orange"
rm -R $outputDir/*
echo -e "$green"
echo -e "[Step $count_step / $count_sum_full] >>> Cleaning of $outputDir is over"
let count_step++
echo -e "[Step $count_step / $count_sum_full] >>> Cleaning of log files..."
echo "" > $renderReportFile
echo "" > $renderReportLog
echo -e "[Step $count_step / $count_sum_full] >>> Cleaning of log files is over"
let count_step++
echo -e "[Step $count_step / $count_sum_full] >>> Generating of import file (import_content.tex) and import of libraries..."
echo -e "$default"


#################################################
## check_import creating file
#################################################	
echo "\makeatletter%" > $outputDir/check_import.tex

#################################################
## Utils writing
#################################################	
echo -e "%############################################################
%###### Package Utils 
%###### This package include Latex tools
%###### Author  : Nicolas LE GUERROUE
%###### Contact : nicolasleguerroue@gmail.com
%############################################################
%######
%###### Include packages
%######
%############################################################" > $utils_dir/Utils.sty
tmp_content=""
sum_lib=0

for item in $utils_dir/*
do
	#echo $outputDir/$item
	if [ -f "$item" ];then
		if [ `echo $item | grep Utils/Utils.sty` ];then
			echo -e "$green"
			echo -e ">>> File for adding libraries loaded !"
			echo -e "$blue"
		else
			if [ `echo $item | grep .sty` ];then  #package

				let sum_lib++
				echo -e "$blue>>> Library "$item" loaded !"
				lib_name=`echo $item | cut -d '.' -f1`
				tmp_content="$tmp_content""$(cat $item)"
				echo -n "\usepackage{$lib_name}" >> $utils_dir/Utils.sty
				echo -e "" >> $utils_dir/Utils.sty

				#get all import
				#if [ "$1" == "--full" ];then 
				#fi

			else

				echo -e "$green >>> Class '$item' is available"
			fi
		fi
	fi
done
#echo "\makeatother%" >> Output/check_import.tex
echo -e "$green>>> $sum_lib libraries loaded !"
echo -e "$default"

#################################################
## Colors loader
#################################################	

colorTableFile="$outputDir/personnalColors.tex"
echo ">>> Generating personnal colors table [$colorTableFile]"

echo "\begin{tableFigure}{|c|c|c|}{Couleurs personnalisées}\hline" >> $colorTableFile
echo " Nom & Texte & Fond \\\\ \hline" >> $colorTableFile
while IFS= read -r line; do
    # Vérifie si la ligne correspond à une couleur
    if [[ $line =~ \\definecolor\{([^\}]+)\}\{([^\}]+)\}\{([^\}]+)\} ]]; then
        color_name="${BASH_REMATCH[1]}"
        color_model="${BASH_REMATCH[2]}"
        color_value="${BASH_REMATCH[3]}"

        # Ajoute une section pour afficher la couleur
        echo "$color_name & \textcolor{$color_name}{$color_name} & \textcolor{$color_name}{\rule{5cm}{0.5cm}} \\\\ \hline" >> $colorTableFile
    fi
done < "$makeDir/Colors.tex"
echo "\end{tableFigure}" >> $colorTableFile
echo -e ">>> Generating personnal colors table : [$green OK $default]"


#################################################
## Warnings 
#################################################	
echo -n "\newcommand{\raiseWarning}[1]{\PackageWarning{Utils}{#1}}" >> $outputDir/add_content.tex
echo -e "" >> $outputDir/add_content.tex
echo -n "\newcommand{\raiseError}[1]{\PackageError{Utils}{#1}}" >> $outputDir/add_content.tex
echo -e "" >> $outputDir/add_content.tex
echo -n "\newcommand{\raiseMessage}[1]{\typeout{>>> Utils: #1}}" >> $outputDir/add_content.tex
echo -e "" >> $outputDir/add_content.tex

tmp_content="" 
tmp_bib=""

for item in $parts_dir/*
do	

if [ -d $item ]
then
	echo -e "$blue >>> Directory '$item' added ! $default"
	img_name=`echo $item | cut -d '.' -f2`
	#echo ">>>$img_name"
	if [ ! -d "$img_dir/$img_name" ]
	then
		echo -e "$red Directory '$img_name' doesn't exist in folder '$img_dir'. \nTous les fichiers avec des images dépendantes de ce dossier ($img_dir/$img_name) ne seront pas importées !$orange\n Dossier(s) dans le répertoire $img_dir: \n" 
		ls $img_dir
		echo -e $default
		exit
	fi

	#Check if file is Latex type [bib handler]

	echo -n "\renewcommand{\rootImages}{Images/$img_name}" >> $outputDir/add_content.tex
	echo -e "" >> $outputDir/add_content.tex

	#Reset bib
	echo "%Bib" > $outputDir/$bibliographyMerge
	
	for item_s in $item/*
	do
		#Tex file handler
		if [ "`echo $item_s | grep .tex`" != "" ]
		then
			tmp_content="$tmp_content$(cat $item_s)"

			echo ">>>> $item_s"
			if [ "`echo $item_s | grep part`" != "" ]
			then
				name_part=`echo $item_s | cut -d '.' -f4`
				echo "\part{"$name_part"}" >> $outputDir/add_content.tex
			fi
			echo -e "$blue >>> File '$item_s' added ! $default"
			echo "\input{"$item_s"}" >> $outputDir/add_content.tex
		fi
		#Bib file handler
		if [ "`echo $item_s | grep localBib.bib`" != "" ]
		then
			tmp_bib="$tmp_bib$(cat $item_s)"
			#echo $tmp_bib
			echo -e "$tmp_bib" >> $outputDir/$bibliographyMerge
		fi

	done

fi
done
rm $standlone
touch $standlone
echo "$tmp_content\n" >> $standlone

echo -e "$green"
echo -e "[Step $count_step / $count_sum_full] >>> Generating of import file for parts (Parts) is over"
let count_step++

if [ "$1" == "--full" ];then 
	echo -e "[Step $count_step / $count_sum_full] >>> First compilation of '$main.tex' file..."
	let count_step++
	pdfLatex
	echo -e "[Step $count_step / $count_sum_full] >>> Creating of bibliography..."
	echo -e "$default"
	bibtex $outputDir/$main
	echo -e "$green"
	echo -e "[Step $count_step / $count_sum_full] >>> First compilation of '$main.tex' file over !"
	let count_step++
	echo -e "[Step $count_step / $count_sum_full] >>> Glossary compilation..."
	echo -e "$default"
	mv $outputDir/$main.xdy $main.xdy  #use to make glossaries
	makeglossaries $outputDir/$main #>> $renderReportFile
	echo -e "$green"
	echo -e "[Step $count_step / $count_sum_full] >>> Glossary compilation over !"
	let count_step++
	echo -e "[Step $count_step / $count_sum_full] >>> Compilation of nomenclature...."
	echo -e "$default"
	makeindex $outputDir/$main >> $renderReportFile
	#makeindex $outputDir/$main.nlo -s nomencl.ist -o $outputDir/$main.nls >> $renderReportFile
	echo -e "$green"
	echo -e "[Step $count_step / $count_sum_full] >>> Compilation of nomenclature is over"
	let count_step++
fi
if [ "$1" == "--full" ];then 
	echo -e "[Step $count_step / $count_sum_full] >>> Second compilation of  '$main.tex' file..."
else
 	echo -e "[Step $count_step / $count_sum_full] >>> First compilation of  '$main.tex' file..."
fi

echo -e "$orange" 
echo "" > $renderReportLog
pdfLatex
echo -e "$green"
if [ "$1" == "--full" ];then 
	echo -e "[Step $count_step / $count_sum_full] >>> Second compilation of  '$main.tex' is over"
else
 	echo -e "[Step $count_step / $count_sum_full] >>> First compilation of  '$main.tex' is over"
fi



#!/bin/bash

# Fonction pour afficher en vert
print_green() {
    echo -e "\e[32m$1\e[0m"
}

# Fonction pour afficher en rouge
print_red() {
    echo -e "\e[31m$1\e[0m"
}

let count_step++
echo -e "[Step $count_step / $count_sum_full] >>> Moving of $main.pdf..."
echo -e "$orange"
mv $outputDir/$main.pdf $main.pdf >> $renderReportFile
echo -e "$green"
echo -e "[Step $count_step / $count_sum_full] >>> Moving of $main.pdf to root folder..."
echo -e "$blue"
echo -e ">>> Messages : "
echo "`cat $renderReportLog | grep ">>> Utils"`"
echo -e "$default"
echo -e "$orange"
echo -e ">>> Warnings : "
echo "`cat $renderReportLog | grep "Package Utils"`"
echo -e "$default"
imageCount=`grep -c 'Utils: Image' $renderReportLog`
messageBoxCount=`grep -c 'Utils: MessageBox' $renderReportLog`
echo -e "$default"
echo "Images count : $imageCount"
echo "$imageCount" > Images/imageCounter.txt
echo "MessageBox count : $messageBoxCount"
echo "$messageBoxCount" > Output/messageBoxCount.txt
echo -e "$default"
#echo "grep -c 'Utils: Image' $renderReportLog"
end=`date +"%s"`
time=`expr $end - $begin`
rm $main.xdy 2>> $renderReportFile


# Vérifie si un lien est valide en utilisant wget
check_url() {
    if wget -q --spider "$1"; then
        print_green "Link $1 is valid"
    else
        print_red "Link $1 is not valid"
    fi
}


# Récupère toutes les URL à l'intérieur des balises \href{}
urls_git=$(grep -oP '\\githubLink\{\K[^}]*' "standlone.tex")
urls_href=$(grep -oP '\\href\{\K[^}]*' "$1")
urls_platformio=$(grep -oP '\\platformIOLink\{\K[^}]*' "standlone.tex")

# Parcours les URL et vérifie leur validité
for url in $urls_href; do
    check_url "$url"
done 

for url in $urls_git; do
    check_url "$url"
done

for url in $urls_platformio; do
    check_url "$url"
done


echo -e ">>> Compilation over in $time s ! $default"


